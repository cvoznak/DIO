Métodos Java

O que é?

É uma porção de código (sub-rotina) que é disponibilizada por uma classe. Este é executado quando é feita uma requisição a ele. São responsáveis por definir e realizar um determinado comportamento.
1. Tem que ser criado dentro de uma classe.
2. Não funciona por si só, é necessário chamar / executar um método.
3. É responsável de fato por fazer os softwares funcionarem.

Como criar?

Padrão de definição:

<?visibilidade?><?tipo?><?modificador?> retorno nome (<?parâmetro?>)<?exceções?>corpo

<?____?> - é opcional

visibilidade	->	public, protected ou private (OOP)
tipo		->	concreto ou abstrato (OOP)
modificador	->	static ou final (OOP)
retorno		->	tipo de dado (exemplo: int, long double, byte, etc) ou void (vazio, executa e não retorna nada)
nome		->	nome que é fornecido ao método (em Java é o mesmo padrão que aplicamos a variaveis)
parâmetro	->	parâmetros que pode receber, parenteses obrigatório, mesmo que vazio
exceções	->	exceções que pode lançar
corpo		->	código que possuiou vazio

Exemplos:

public String getNome() {...}
public double calcularTotalNota() {...}
public int verificarDistancia(int cordenada1, int cordenada2) {...}
public abstract void executar();
public void alterarFabricante(Fabricante fabricante) {...}
public Relatorio gerarDadosAnaliticos(Cliente cliente, Lista <Compra> compras) {...}

public static R N (P) {...}

Como utilizar?

Chamando...

nome_da_classe.nome_do_metodo(); ou nome_da_classe.nome_do_metodo(...);
nome_do_objeto.nome_do_metodo(); ou nome_do_objeto.nome_do_metodo(...); 

Exemplo:

Math.random();

Classe Math - Metodo random

Math.sqrt(4);

Classe Math - Metodo raiz quadrada (sqrt) do numero 4

usuario.getEmail();

Objeto usuario - Metodo getEmail

Usualmente se utiliza a primeira letra de uma classe sempre maiuscula, enquando em caso de objeto tudo se apresenta minusculo.

Particularidades de metodos:

1.  Assinatura - É a forma de única de identificar um método.
	Ass = nome + parâmetro
	Método: 
		public double calcularTotalVenda(double precoItem1, double precoItem2, double precoItem3){...}
	Assinatura:
		double calcularTotalVenda(double precoItem1, double precoItem2, double precoItem3)
			Neste método é seu nome e seus parametros

2. Construtor e Destrutor: são métodos especiais usados na orientação a objetos. (Pode criar ou auxiliar a destruir)

3. Mensagem - é o ato de solicitar ao método que o mesmo execute. Esta pode ser direcionada a um objeto ou a uma classe.

4. Passagem de parâmetros
	- por valor (cópia)
	- por referência (endereço) OOP

	- Passagem por valor:

		int i = 10;
		public void fazerAlgo(int i) {
			
			i = i + 10;
			System.out.println("Valor de i dentro: " + i);
		}
		System.out.println("Valor de i fora: " + i);

		Nesse exemplo é criada uma cópia do i para ser trabalhada dentro de i, não alterando seu valor de base(externo).
 
Boas Práticas:

- Nomes devem ser descritivos, mas curtos;
- Notação camelo
- Deve possuir entre 80 e 120 linhas (caso necessário utilize um método dentro de outro)
- Evitar lista de parâmetros longas
- Visibilidades adequadas

Sobrecarga de um método

É a capacidade de definirmétodos para diferente contextos, mas preservando seu nome.
O mesmo método vai se comportar de formas diferentes conforme a necessidade, mudando a lista de parametros.

Ou seja, é alterar a assinatura do método: (Ass = nome + parâmetro)

converterParaInteiro(float f);
converterParaInteiro(double d);
converterParaInteiro(String s);
converterParaInteiro(floatf, RoudType rd);
converterParaInteiro(double d, RoundType rd);
converterParaInteiro(String, RoundType rd);

converterParaInteiro(RoundType rd, String s);
converterParaInteiro();

->RoundType fala se arredonda para cima ou para baixo.

Retornos

É uma instrução de interrupção

break, continue -> estão mais atrelados a estruturas de repetição
return -> mais atrelado a métodos

É executado quando:
- Completa todas suas instruções internas
- Chega a uma declaração explicita de retorno
- Lança uma exceção

O tipo de retorno do método é definido na sua criação e pode ser um tipo primitivo ou objeto;
O tipo de dado do return deve ser compatível com o do método;
Se o método for sem retorno(void), pode ou não ter um "return" para encerrar sua execução.

